name: Deploy to Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'minikube'
        type: choice
        options:
        - minikube
        - gke

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ismaill370

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push user-service
      uses: docker/build-push-action@v5
      with:
        context: ./services/user-service
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/user-service:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/user-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push help-service
      uses: docker/build-push-action@v5
      with:
        context: ./services/help-service
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/help-service:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/help-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-minikube:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'minikube') ||
      (github.event_name == 'push' && github.ref != 'refs/heads/main') ||
      github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start minikube
      uses: medyagh/setup-minikube@master
      with:
        driver: docker
        kubernetes-version: v1.28.0

    - name: Enable minikube addons
      run: |
        minikube addons enable ingress
        minikube addons enable metrics-server

    - name: Create secrets
      run: |
        kubectl create secret generic user-service-secret \
          --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
          --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl create secret generic help-service-secret \
          --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
          --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to Kubernetes
      run: |
        # Apply ConfigMaps
        kubectl apply -f k8s/user-service/user-service-config.yaml
        kubectl apply -f k8s/help-service/help-service-config.yaml
        kubectl apply -f k8s/frontend/frontend-config.yaml
        
        # Apply services
        kubectl apply -f k8s/user-service/user-service-service.yaml
        kubectl apply -f k8s/help-service/help-service-service.yaml
        kubectl apply -f k8s/frontend/frontend-service.yaml
        
        # Apply deployments
        kubectl apply -f k8s/user-service/user-service-deployment.yaml
        kubectl apply -f k8s/help-service/help-service-deployment.yaml
        kubectl apply -f k8s/frontend/frontend-deployment.yaml
        
        # Apply HPAs
        kubectl apply -f k8s/user-service/user-service-hpa.yaml
        kubectl apply -f k8s/help-service/help-service-hpa.yaml
        kubectl apply -f k8s/frontend/frontend-hpa.yaml
        
        # Apply ingress
        kubectl apply -f k8s/frontend/frontend-static-ingress.yaml
        kubectl apply -f k8s/frontend/frontend-users-api-ingress.yaml
        kubectl apply -f k8s/frontend/frontend-help-api-ingress.yaml

    - name: Wait for deployments
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/user-service-deployment
        kubectl wait --for=condition=available --timeout=300s deployment/help-service-deployment
        kubectl wait --for=condition=available --timeout=300s deployment/frontend-deployment

    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
        kubectl get ingress
        kubectl get hpa

    - name: Test services
      run: |
        kubectl run test-pod --image=curlimages/curl --restart=Never --rm -i --tty -- sh -c "
          curl -f http://user-service:3000/health || exit 1
          curl -f http://help-service:3002/health || exit 1
          echo 'All services healthy!'
        "

    - name: Output access info
      run: |
        echo "Minikube IP: $(minikube ip)"
        echo "Frontend NodePort: $(kubectl get service frontend -o jsonpath='{.spec.ports[0].nodePort}')"
        echo "Access: http://$(minikube ip):$(kubectl get service frontend -o jsonpath='{.spec.ports[0].nodePort}')"
