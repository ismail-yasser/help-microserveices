name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Images
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/help-service:latest ./services/help-service
        docker push ${{ secrets.DOCKER_USERNAME }}/help-service:latest
        docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest ./services/user-service
        docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'test' || github.event.inputs.environment == null
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Install k3d
      run: |
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        
    - name: Create k3d Cluster
      run: |
        k3d cluster create ci-cluster --wait
        
    - name: Verify Cluster
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Update Image References
      run: |
        # Update the image references in the deployment files to use DockerHub
        sed -i "s|frontend:local|${{ secrets.DOCKER_USERNAME }}/frontend:latest|g" k8s/frontend-deployment.yaml
        sed -i "s|user-service:local|${{ secrets.DOCKER_USERNAME }}/user-service:latest|g" k8s/user-service-deployment.yaml
        sed -i "s|help-service:local|${{ secrets.DOCKER_USERNAME }}/help-service:latest|g" k8s/help-service-deployment.yaml
        
    - name: Apply Secrets
      run: |
        kubectl apply -f k8s/help-service-secret.yaml --validate=false
        kubectl apply -f k8s/user-service-secret.yaml --validate=false

    - name: Apply ConfigMaps
      run: |
        kubectl apply -f k8s/help-service-configmap.yaml --validate=false
        kubectl apply -f k8s/user-service-configmap.yaml --validate=false
        kubectl apply -f k8s/frontend-configmap.yaml --validate=false

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/ --validate=false
        
    - name: Wait for Deployments
      run: |
        kubectl rollout status deployment/frontend-deployment --timeout=120s
        kubectl rollout status deployment/user-service-deployment --timeout=120s
        kubectl rollout status deployment/help-service-deployment --timeout=120s
        
    - name: Display Service Status
      run: |
        kubectl get pods
        kubectl get services
        kubectl get ingress
        
    - name: Run Integration Tests
      run: |
        echo "Running integration tests on test environment..."
        # Add your integration test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GKE_PROJECT_ID }}
        version: 'latest'
        
    # Get the GKE credentials
    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }}
        
    - name: Verify GKE Connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Update Image References
      run: |
        # Update the image references in the deployment files to use DockerHub
        sed -i "s|frontend:local|${{ secrets.DOCKER_USERNAME }}/frontend:latest|g" k8s/frontend-deployment.yaml
        sed -i "s|user-service:local|${{ secrets.DOCKER_USERNAME }}/user-service:latest|g" k8s/user-service-deployment.yaml
        sed -i "s|help-service:local|${{ secrets.DOCKER_USERNAME }}/help-service:latest|g" k8s/help-service-deployment.yaml
        
    - name: Apply Secrets
      run: |
        kubectl apply -f k8s/help-service-secret.yaml --validate=false
        kubectl apply -f k8s/user-service-secret.yaml --validate=false

    - name: Apply ConfigMaps
      run: |
        kubectl apply -f k8s/help-service-configmap.yaml --validate=false
        kubectl apply -f k8s/user-service-configmap.yaml --validate=false
        kubectl apply -f k8s/frontend-configmap.yaml --validate=false

    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/ --validate=false
        
    - name: Wait for Deployments
      run: |
        kubectl rollout status deployment/frontend-deployment --timeout=180s
        kubectl rollout status deployment/user-service-deployment --timeout=180s
        kubectl rollout status deployment/help-service-deployment --timeout=180s
        
    - name: Display Service Status
      run: |
        kubectl get pods
        kubectl get services
        kubectl get ingress