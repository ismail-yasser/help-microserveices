name: Enhanced CI/CD Pipeline with Error Detection

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable Debug Mode'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ismaill370
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}

jobs:
  # Pre-flight checks and validation
  validate:
    runs-on: ubuntu-latest
    outputs:
      has-frontend: ${{ steps.check-files.outputs.has-frontend }}
      has-user-service: ${{ steps.check-files.outputs.has-user-service }}
      has-help-service: ${{ steps.check-files.outputs.has-help-service }}
      k8s-valid: ${{ steps.validate-k8s.outputs.valid }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check project structure
      id: check-files
      run: |
        echo "üîç Checking project structure..."
        
        # Check for required files
        if [ -f "frontend/Dockerfile" ] && [ -f "frontend/package.json" ]; then
          echo "‚úÖ Frontend files found"
          echo "has-frontend=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Frontend files missing"
          echo "has-frontend=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -f "services/user-service/Dockerfile" ] && [ -f "services/user-service/package.json" ]; then
          echo "‚úÖ User service files found"
          echo "has-user-service=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå User service files missing"
          echo "has-user-service=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -f "services/help-service/Dockerfile" ] && [ -f "services/help-service/package.json" ]; then
          echo "‚úÖ Help service files found"
          echo "has-help-service=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Help service files missing"
          echo "has-help-service=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate Kubernetes manifests
      id: validate-k8s
      run: |
        echo "üîç Validating Kubernetes YAML files..."
        
        # Check YAML syntax
        YAML_ERRORS=0
        for file in $(find k8s/ -name "*.yaml" -o -name "*.yml" 2>/dev/null); do
          echo "Checking $file..."
          if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo "‚ùå YAML syntax error in $file"
            YAML_ERRORS=$((YAML_ERRORS + 1))
          else
            echo "‚úÖ $file is valid"
          fi
        done
        
        if [ $YAML_ERRORS -eq 0 ]; then
          echo "‚úÖ All Kubernetes manifests are valid"
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Found $YAML_ERRORS YAML errors"
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Validate Docker contexts
      run: |
        echo "üîç Validating Docker contexts..."
        
        # Check Dockerfile syntax
        for dockerfile in frontend/Dockerfile services/*/Dockerfile; do
          if [ -f "$dockerfile" ]; then
            echo "Checking $dockerfile..."
            if docker build --dry-run -f "$dockerfile" $(dirname "$dockerfile") > /dev/null 2>&1; then
              echo "‚úÖ $dockerfile is valid"
            else
              echo "‚ùå $dockerfile has issues"
              echo "::error::Dockerfile validation failed for $dockerfile"
            fi
          fi
        done

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.k8s-valid == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service: 
        - name: frontend
          context: ./frontend
          condition: ${{ needs.validate.outputs.has-frontend == 'true' }}
        - name: user-service
          context: ./services/user-service
          condition: ${{ needs.validate.outputs.has-user-service == 'true' }}
        - name: help-service
          context: ./services/help-service
          condition: ${{ needs.validate.outputs.has-help-service == 'true' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      if: matrix.service.condition == 'true'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: matrix.service.condition == 'true'

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      if: matrix.service.condition == 'true'
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      if: matrix.service.condition == 'true'
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push ${{ matrix.service.name }}
      uses: docker/build-push-action@v5
      if: matrix.service.condition == 'true'
      with:
        context: ${{ matrix.service.context }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}:${{ github.sha }}
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Verify image
      if: matrix.service.condition == 'true'
      run: |
        echo "üîç Verifying built image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}:latest
        docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}:latest
        echo "‚úÖ Image verified successfully"

  # Deploy to Minikube (for testing and development)
  deploy-minikube:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start Minikube
      uses: medyagh/setup-minikube@master
      with:
        driver: docker
        kubernetes-version: v1.28.0
        memory: 4096
        cpus: 2

    - name: Enable Minikube addons
      run: |
        echo "üöÄ Enabling Minikube addons..."
        minikube addons enable ingress
        minikube addons enable metrics-server
        minikube addons enable dashboard
        
        # Wait for ingress controller
        echo "‚è≥ Waiting for ingress controller..."
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s

    - name: Create secrets with error handling
      run: |
        echo "üîê Creating Kubernetes secrets..."
        
        # Check if secrets are provided
        if [ -z "${{ secrets.MONGO_URI }}" ]; then
          echo "::warning::MONGO_URI secret not set, using default"
          MONGO_URI="mongodb://localhost:27017/testdb"
        else
          MONGO_URI="${{ secrets.MONGO_URI }}"
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "::warning::JWT_SECRET not set, generating random"
          JWT_SECRET=$(openssl rand -base64 32)
        else
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
        fi
        
        # Create secrets with error handling
        kubectl create secret generic user-service-secret \
          --from-literal=MONGO_URI="$MONGO_URI" \
          --from-literal=JWT_SECRET="$JWT_SECRET" \
          --dry-run=client -o yaml | kubectl apply -f - || \
          echo "::error::Failed to create user-service-secret"
        
        kubectl create secret generic help-service-secret \
          --from-literal=MONGO_URI="$MONGO_URI" \
          --from-literal=JWT_SECRET="$JWT_SECRET" \
          --dry-run=client -o yaml | kubectl apply -f - || \
          echo "::error::Failed to create help-service-secret"

    - name: Deploy with enhanced error detection
      run: |
        echo "üöÄ Deploying to Kubernetes..."
        
        # Function to apply with retry and error handling
        apply_with_retry() {
          local file=$1
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üìÅ Applying $file (attempt $attempt/$max_attempts)..."
            if kubectl apply -f "$file"; then
              echo "‚úÖ Successfully applied $file"
              return 0
            else
              echo "‚ùå Failed to apply $file on attempt $attempt"
              if [ $attempt -eq $max_attempts ]; then
                echo "::error::Failed to apply $file after $max_attempts attempts"
                return 1
              fi
              sleep 5
            fi
            attempt=$((attempt + 1))
          done
        }
        
        # Apply resources in order with error handling
        echo "üìã Applying ConfigMaps..."
        for configmap in k8s/*/user-service-config.yaml k8s/*/help-service-config.yaml k8s/*/frontend-config.yaml; do
          [ -f "$configmap" ] && apply_with_retry "$configmap"
        done
        
        echo "üîó Applying Services..."
        for service in k8s/*/*-service.yaml; do
          [ -f "$service" ] && apply_with_retry "$service"
        done
        
        echo "üöÄ Applying Deployments..."
        for deployment in k8s/*/*-deployment.yaml; do
          [ -f "$deployment" ] && apply_with_retry "$deployment"
        done
        
        echo "üìà Applying HPAs..."
        for hpa in k8s/*/*-hpa.yaml; do
          [ -f "$hpa" ] && apply_with_retry "$hpa"
        done
        
        echo "üåê Applying Ingress..."
        for ingress in k8s/*/*-ingress.yaml; do
          [ -f "$ingress" ] && apply_with_retry "$ingress"
        done

    - name: Advanced deployment verification
      run: |
        echo "üîç Verifying deployment with enhanced checks..."
        
        # Wait for deployments with timeout
        echo "‚è≥ Waiting for deployments to be ready..."
        kubectl wait --for=condition=available --timeout=600s deployment --all || {
          echo "::error::Deployments failed to become ready"
          echo "üìä Current deployment status:"
          kubectl get deployments -o wide
          echo "üìä Pod status:"
          kubectl get pods -o wide
          echo "üìä Events:"
          kubectl get events --sort-by='.lastTimestamp' | tail -20
          exit 1
        }
        
        # Comprehensive health checks
        echo "üè• Running comprehensive health checks..."
        
        # Check pod status
        echo "üìä Pod Status:"
        kubectl get pods -o wide
        
        # Check for failed pods
        FAILED_PODS=$(kubectl get pods --field-selector=status.phase=Failed -o name | wc -l)
        if [ $FAILED_PODS -gt 0 ]; then
          echo "::error::Found $FAILED_PODS failed pods"
          kubectl get pods --field-selector=status.phase=Failed
          exit 1
        fi
        
        # Check services
        echo "üîó Service Status:"
        kubectl get services -o wide
        
        # Check ingress
        echo "üåê Ingress Status:"
        kubectl get ingress -o wide
        
        # Check HPA
        echo "üìà HPA Status:"
        kubectl get hpa -o wide

    - name: Service connectivity tests
      run: |
        echo "üß™ Running service connectivity tests..."
        
        # Create test pod for internal testing
        kubectl run test-pod --image=curlimages/curl --restart=Never --rm -i --tty --timeout=60s -- sh -c "
          echo 'üîç Testing internal service connectivity...'
          
          # Test user service
          if curl -f http://user-service:3000/health --max-time 10; then
            echo '‚úÖ User service health check passed'
          else
            echo '‚ùå User service health check failed'
            exit 1
          fi
          
          # Test help service
          if curl -f http://help-service:3002/health --max-time 10; then
            echo '‚úÖ Help service health check passed'
          else
            echo '‚ùå Help service health check failed'
            exit 1
          fi
          
          echo '‚úÖ All internal connectivity tests passed!'
        " || {
          echo "::error::Service connectivity tests failed"
          echo "üìä Debugging information:"
          kubectl get pods -o wide
          kubectl get services
          kubectl describe pods
          exit 1
        }

    - name: External access verification
      run: |
        echo "üåç Testing external access..."
        
        MINIKUBE_IP=$(minikube ip)
        echo "üîó Minikube IP: $MINIKUBE_IP"
        
        # Test NodePort access
        FRONTEND_NODEPORT=$(kubectl get service frontend -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "")
        if [ -n "$FRONTEND_NODEPORT" ]; then
          echo "üîó Frontend NodePort: $FRONTEND_NODEPORT"
          if curl -f "http://$MINIKUBE_IP:$FRONTEND_NODEPORT" --max-time 10 --silent > /dev/null; then
            echo "‚úÖ Frontend accessible via NodePort"
          else
            echo "‚ö†Ô∏è Frontend not accessible via NodePort (may be normal)"
          fi
        fi
        
        # Test ingress access
        if curl -H "Host: frontend.local" "http://$MINIKUBE_IP/" --max-time 10 --silent > /dev/null; then
          echo "‚úÖ Frontend accessible via ingress"
        else
          echo "‚ö†Ô∏è Frontend not accessible via ingress (may need hosts entry)"
        fi

    - name: Generate deployment report
      if: always()
      run: |
        echo "üìã === DEPLOYMENT REPORT ===" > deployment-report.txt
        echo "Date: $(date)" >> deployment-report.txt
        echo "Commit: ${{ github.sha }}" >> deployment-report.txt
        echo "Environment: Minikube" >> deployment-report.txt
        echo "" >> deployment-report.txt
        
        echo "üîó Access Information:" >> deployment-report.txt
        echo "Minikube IP: $(minikube ip)" >> deployment-report.txt
        echo "Frontend NodePort: $(kubectl get service frontend -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo 'Not available')" >> deployment-report.txt
        echo "Access URL: http://$(minikube ip):$(kubectl get service frontend -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo 'CHECK_NODEPORT')" >> deployment-report.txt
        echo "" >> deployment-report.txt
        
        echo "üìä Resource Status:" >> deployment-report.txt
        kubectl get all >> deployment-report.txt 2>&1
        echo "" >> deployment-report.txt
        
        echo "üåê Ingress Configuration:" >> deployment-report.txt
        kubectl get ingress -o wide >> deployment-report.txt 2>&1
        echo "" >> deployment-report.txt
        
        echo "üìà HPA Status:" >> deployment-report.txt
        kubectl get hpa >> deployment-report.txt 2>&1
        echo "" >> deployment-report.txt
        
        if [ "${{ env.DEBUG_MODE }}" = "true" ]; then
          echo "üêõ Debug Information:" >> deployment-report.txt
          kubectl describe pods >> deployment-report.txt 2>&1
          echo "" >> deployment-report.txt
          kubectl get events --sort-by='.lastTimestamp' >> deployment-report.txt 2>&1
        fi
        
        cat deployment-report.txt

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-report-minikube
        path: deployment-report.txt

  # Summary job that runs regardless of deployment
  summary:
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-minikube]
    if: always()
    
    steps:
    - name: Generate pipeline summary
      run: |
        echo "## üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìä Job Status" >> $GITHUB_STEP_SUMMARY
        echo "- Validate: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deploy Minikube: ${{ needs.deploy-minikube.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üê≥ Built Images" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/user-service:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/help-service:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üîß Quick Commands" >> $GITHUB_STEP_SUMMARY
        echo "Deploy locally:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "kubectl apply -f k8s/ --recursive" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-minikube.result }}" = "success" ]; then
          echo "### üéØ Minikube Access" >> $GITHUB_STEP_SUMMARY
          echo "The application is deployed and accessible!" >> $GITHUB_STEP_SUMMARY
          echo "Check the deployment artifacts for access details." >> $GITHUB_STEP_SUMMARY
        fi
